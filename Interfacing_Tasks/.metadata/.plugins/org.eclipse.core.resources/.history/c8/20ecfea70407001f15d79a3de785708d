#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"

#include "../../MCAL/PORT/PORT_interface.h"

#include "../../HAL/KEYPAD_DRIVER/KPD_interface.h"
#include "../../HAL/LCD_DRIVER/LCD_interface.h"

#include <util/delay.h>

#define KPD_NO_PRESSED_KEY 0xff

/* ASCII values */
#define ASCII_0 48
#define ASCII_9 57
#define ASCII_DOT 46 // ASCII value for decimal point
#define ASCII_PLUS 43
#define ASCII_MINUS 45
#define ASCII_MULTIPLY 42
#define ASCII_DIVIDE 47
#define ASCII_EQUALS 61

float calculate(float num1, float num2, char op) {
    switch (op) {
        case ASCII_PLUS:
            return num1 + num2;
        case ASCII_MINUS:
            return num1 - num2;
        case ASCII_MULTIPLY:
            return num1 * num2;
        case ASCII_DIVIDE:
            if (num2 != 0) {
                return num1 / num2;
            } else {
                // Handle division by zero error
                lcd_send_string("Error: Division by ZERO");
                _delay_ms(2000);
                lcd_clear();
                return 0; // Return 0 to indicate error
            }
        default:
            return 0; // Return 0 for unsupported operations
    }
}

int main(void) {
    START_CALC();
    float num1 = 0;
    float num2 = 0;
    float fractional_part = 0; // Variable to store the fractional part of the number
    char op = 0;
    float res = 0;
    u8 op_flag = 0;
    u8 decimal_flag = 0; // Flag to indicate if decimal point is pressed

    while (1) {
        s32 key = KPD_GetPressedkey();
        if (key == '#') {
            // Reset calculator
            lcd_clear();
            num1 = 0;
            num2 = 0;
            op = 0;
            res = 0;
            op_flag = 0;
            decimal_flag = 0;
        } else if ((key >= ASCII_0 && key <= ASCII_9) || key == ASCII_DOT) {
            if (key == ASCII_DOT) {
                decimal_flag = 1;
            } else if (!op_flag) {
                if (decimal_flag) {
                    // If decimal point is pressed, add the pressed digit to the fractional part
                    fractional_part = (fractional_part * 10) + (key - ASCII_0);
                } else {
                    num1 = (num1 * 10) + (key - ASCII_0);
                }
            } else {
                if (decimal_flag) {
                    fractional_part = (fractional_part * 10) + (key - ASCII_0);
                } else {
                    num2 = (num2 * 10) + (key - ASCII_0);
                }
            }
            lcd_send_data(key);
        } else if (key == ASCII_PLUS || key == ASCII_MINUS || key == ASCII_MULTIPLY || key == ASCII_DIVIDE) {
            op_flag = 1;
            op = key;
            lcd_send_data(key);
        } else if (key == ASCII_EQUALS) {
            // Combine integer and fractional parts to form the complete number
            num1 += fractional_part / 10;
            num2 += fractional_part / 10;

            // Perform calculation
            res = calculate(num1, num2, op);

            // Display result
            lcd_go_to_xy(1, 0);
            lcd_show_number(res);
            _delay_ms(2000);
            lcd_clear();
            num1 = res;
            num2 = 0;
            op = 0;
            op_flag = 0;
            decimal_flag = 0;
            fractional_part = 0; // Reset fractional part after calculation
        }
    }
    return 0;
}
