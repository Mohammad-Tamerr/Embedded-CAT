#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"

#include "../../MCAL/PORT/PORT_interface.h"

#include "../../HAL/KEYPAD_DRIVER/KPD_interface.h"
#include "../../HAL/LCD_DRIVER/LCD_interface.h"

#include <util/delay.h>
#include "calc.h"

#define KPD_NO_PRESSED_KEY      0xff

/* ASCII values */
#define ASCII_0             48
#define ASCII_9             57
#define ASCII_PLUS          43
#define ASCII_MINUS         45
#define ASCII_MULTIPLY      42
#define ASCII_DIVIDE        47
#define ASCII_DOT           46 // ASCII value for decimal point
#define ASCII_EQUALS        61

int main(void)
{
    START_CALC();
    float NUM_1 = 0;
    float NUM_2 = 0;
    u8 OP = 0;
    float RES = 0;
    u8 OP_FLAG = 0;
    u8 DECIMAL_FLAG = 0; // Flag to indicate if decimal point is pressed

    while (1)
    {
        s32 RET_KEY = KPD_GetPressedkey();
        if (RET_KEY == '#')
        {
            // Reset calculator
            lcd_clear();
            RESET_CALC(&NUM_1, &NUM_2, &OP, &RES, &OP_FLAG);
            DECIMAL_FLAG = 0; // Reset decimal flag
        }
        else if ((RET_KEY >= ASCII_0 && RET_KEY <= ASCII_9) || RET_KEY == ASCII_DOT)
        {
            if (RET_KEY == ASCII_DOT)
            {
                DECIMAL_FLAG = 1; // Set decimal flag
            }
            else if (!OP_FLAG)
            {
                if (DECIMAL_FLAG)
                {
                    NUM_1 += (RET_KEY - ASCII_0) / 10.0f; // Handle floating-point input for NUM_1
                }
                else
                {
                    NUM_1 = (NUM_1 * 10) + (RET_KEY - ASCII_0);
                }
            }
            else
            {
                if (DECIMAL_FLAG)
                {
                    NUM_2 += (RET_KEY - ASCII_0) / 10.0f; // Handle floating-point input for NUM_2
                }
                else
                {
                    NUM_2 = (NUM_2 * 10) + (RET_KEY - ASCII_0);
                }
            }
            lcd_send_data(RET_KEY);
        }
        else if (RET_KEY == ASCII_PLUS || RET_KEY == ASCII_MINUS || RET_KEY == ASCII_MULTIPLY || RET_KEY == ASCII_DIVIDE)
        {
            OP_FLAG = 1;
            OP = RET_KEY;
            lcd_send_data(RET_KEY);
            DECIMAL_FLAG = 0; // Reset decimal flag when an operator is pressed
        }
        else if (RET_KEY == ASCII_EQUALS)
        {
            // Perform calculation
            switch (OP)
            {
                case ASCII_PLUS:
                    RES = NUM_1 + NUM_2;
                    break;
                case ASCII_MINUS:
                    RES = NUM_1 - NUM_2;
                    break;
                case ASCII_MULTIPLY:
                    RES = NUM_1 * NUM_2;
                    break;
                case ASCII_DIVIDE:
                    if (NUM_2 != 0)
                    {
                        RES = NUM_1 / NUM_2;
                    }
                    else
                    {
                        // Handle division by zero error
                        lcd_send_string("Error: Division by ZERO");
                        _delay_ms(2000);
                        lcd_clear();
                        RESET_CALC(&NUM_1, &NUM_2, &OP, &RES, &OP_FLAG);
                        continue; // Skip further processing
                    }
                    break;
                default:
                    RES = NUM_1;
                    break;
            }

            // Display result
            lcd_go_to_xy(1, 0);
            if (RES < 0)
            {
                lcd_send_data(ASCII_MINUS); // Display negative sign
                RES *= -1; // Make result positive for display
            }
            lcd_show_number(RES);
            _delay_ms(2000);
            lcd_clear();
            RESET_CALC(&NUM_1, &NUM_2, &OP, &RES, &OP_FLAG);
            DECIMAL_FLAG = 0; // Reset decimal flag
        }
    }
    return 0;
}
