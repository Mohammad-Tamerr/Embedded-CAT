#include "PORT_interface.h"
#include "KPD_interface.h"
#include "LCD_interface.h"
#define NULL 0
#define MAX_EXPRESSION_LENGTH 16

int main() {
    /* Assuming you have functions like lcd_clear(), lcd_putc(), lcd_puts(),
       keypad_init(), keypad_getkey() from your provided libraries */

    /* Initialize LCD and Keypad */
    LCD_voidInit();
    KPD_voidInit();

    char expression[MAX_EXPRESSION_LENGTH];
    while (1) {
        LCD_voidClear();
        LCD_voidSendString("Enter expression:");
        char key;
        int i = 0;
        while (1) {
            key = KPD_u8GetPressedKey();
            if (key != '\0' && key != '=' && i < MAX_EXPRESSION_LENGTH - 1) {
                expression[i++] = key;
                LCD_voidSendData(key);
            } else if (key == '=') {
                expression[i] = '\0';
                break;
            }
        }

        // Tokenize the expression
        int result = 0;
        char operation = '+';
        int number;
        char *token = strtok(expression, "+-*/");
        if (token != NULL) {
            result = atoi(token);
        }
        while (token != NULL) {
            token = strtok(NULL, "+-*/");
            if (token != NULL) {
                number = atoi(token);
                switch (operation) {
                    case '+':
                        result += number;
                        break;
                    case '-':
                        result -= number;
                        break;
                    case '*':
                        result *= number;
                        break;
                    case '/':
                        if (number != 0) {
                            result /= number;
                        } else {
                            LCD_voidClear();
                            LCD_voidSendString("Error: Division by zero");
                            _delay_ms(2000);
                            break;
                        }
                        break;
                }
                operation = expression[i];
            }
        }

        LCD_voidClear();
        LCD_voidGotoXY(0, 0);
        LCD_voidSendString("Result:");
        LCD_voidGotoXY(0, 1);
        LCD_voidSendString(itoa(result));
        _delay_ms(2000);
    }

    return 0;
}
