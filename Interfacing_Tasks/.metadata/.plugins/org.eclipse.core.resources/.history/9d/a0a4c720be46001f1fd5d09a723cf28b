#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"

#include "../../MCAL/PORT/PORT_interface.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/Timers/Timers_interface.h"
#include "../../MCAL/External_Interrupt/EXI_interface.h"
#include "../../MCAL/GIE/GIE_interface.h"

#include "trafficlight.h"

// Define constants for modes
#define NORMAL_MODE       0
#define PEDESTRIAN_MODE   1

// Define global variables
volatile char mode = NORMAL_MODE;  // Variable to store the current mode
static u8 counter = 0; // Counter for Normal Mode
void (*Timer_CallBackNotificationFunc)(void) = NULL;  // Pointer to callback function

// Define states for pedestrian mode
enum PedestrianState {
    PED_WAIT_CAR_RED,
    PED_WAIT_CAR_GREEN_YELLOW,
    PED_GREEN_CAR_RED,
    PED_YELLOW_BLINK,
    PED_FINISH
};

volatile enum PedestrianState pedestrianState = PED_WAIT_CAR_RED;
u8 timerCounter = 0;  // Timer counter for state transitions

void NormalMode(void)
{
    static u8 compare_match_counter1 = 0;
    compare_match_counter1++;
    char counter = 0;
    // Turn off all pedestrian LEDs
    DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_0, DIO_PIN_LOW); // Red pedestrian LED
    DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_3, DIO_PIN_LOW); // Yellow pedestrian LED
    DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_6, DIO_PIN_LOW); // Green pedestrian LED

    if (compare_match_counter1 == 23)
    {
        switch (counter)
        {
            case 0:
                // Turn on car green LED and turn off car yellow and red LEDs
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_6, DIO_PIN_HIGH); // Green car LED
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_3, DIO_PIN_LOW);  // Yellow car LED
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_0, DIO_PIN_LOW);  // Red car LED

                counter++;
                break;

            case 1:
                // Turn on car yellow LED and turn off car green and red LEDs
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_6, DIO_PIN_LOW);  // Green car LED
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_3, DIO_PIN_HIGH); // Yellow car LED
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_0, DIO_PIN_LOW);  // Red car LED

                counter++;
                break;

            case 2:
                // Turn on car red LED and turn off car green and yellow LEDs
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_6, DIO_PIN_LOW);  // Green car LED
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_3, DIO_PIN_LOW);  // Yellow car LED
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_0, DIO_PIN_HIGH); // Red car LED

                counter = 0;
                break;
        }
        compare_match_counter1 = 0;
    }
}

void PedestrianMode(void)
{
    timerCounter++;
    switch (pedestrianState)
    {
        case PED_WAIT_CAR_RED:
            if (GET_BIT(DIO_PORT_A, DIO_PIN_0)) // Car Red LED is on
            {
                DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_6, DIO_PIN_HIGH); // Pedestrian Green LED
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_0, DIO_PIN_HIGH); // Car Red LED

                if (timerCounter >= 156) // 5 seconds
                {
                    pedestrianState = PED_YELLOW_BLINK;
                    timerCounter = 0;
                }
            }
            else // Car Green or Yellow LED is on
            {
                DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_0, DIO_PIN_HIGH); // Pedestrian Red LED
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_3, DIO_PIN_HIGH); // Car Yellow LED

                if (timerCounter >= 156) // 5 seconds
                {
                    DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_0, DIO_PIN_HIGH); // Car Red LED
                    DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_6, DIO_PIN_HIGH); // Pedestrian Green LED
                    pedestrianState = PED_YELLOW_BLINK;
                    timerCounter = 0;
                }
            }
            break;

        case PED_YELLOW_BLINK:
            if (timerCounter % 23 == 0) // Blink every 1 second
            {
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_3, !DIO_Get_Pin_Value(DIO_PORT_A, DIO_PIN_3)); // Toggle Car Yellow LED
                DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_3, !DIO_Get_Pin_Value(DIO_PORT_D, DIO_PIN_3)); // Toggle Pedestrian Yellow LED
            }

            if (timerCounter >= 156) // 5 seconds
            {
                pedestrianState = PED_FINISH;
                timerCounter = 0;
            }
            break;

        case PED_FINISH:
            if (timerCounter % 23 == 0) // Blink every 1 second
            {
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_3, !DIO_Get_Pin_Value(DIO_PORT_A, DIO_PIN_3)); // Toggle Car Yellow LED
                DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_3, !DIO_Get_Pin_Value(DIO_PORT_D, DIO_PIN_3)); // Toggle Pedestrian Yellow LED
            }

            if (timerCounter >= 156) // 5 seconds
            {
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_0, DIO_PIN_LOW);  // Car Red LED
                DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_6, DIO_PIN_LOW);  // Pedestrian Green LED
                DIO_Set_Pin_Value(DIO_PORT_D, DIO_PIN_0, DIO_PIN_HIGH); // Pedestrian Red LED
                DIO_Set_Pin_Value(DIO_PORT_A, DIO_PIN_6, DIO_PIN_HIGH); // Car Green LED

                mode = NORMAL_MODE;
                pedestrianState = PED_WAIT_CAR_RED;
                timerCounter = 0;
            }
            break;
    }
}

// Function to transition to pedestrian mode
void TransitionToPedestrianMode(void)
{
    mode = PEDESTRIAN_MODE;
}

// Function to initialize the system (ports, interrupts, timers)
void InitSystem(void)
{
    // Initialize Port
    PORT_voidInit();

    // Enable Global Interrupt
    GIE_Enable();

    // Initialize INT2 Interrupt for pedestrian button
    EXI_voidInt2Init();
    EXI_SetCallBackINT2(TransitionToPedestrianMode);

    // Initialize Timer0 in CTC mode with prescaler 1024
    TIMER0_u8Init(CTC, NORMAL, TIMER_DIV_BY_1024);

    // Set Timer0 compare match value
    TIMER0_voidSetCompMatchVal(150);

    // Set Timer0 compare match callback
    TIMER_u8SetCallBack(TIMER0_OUTPUT_COM_INT, NormalMode);
}
